//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SW.MySoapServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MySoapServerBinding", Namespace="urn:MySoapServer")]
    public partial class MySoapServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback echoTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSkierOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTeamMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback addFederationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MySoapServer() {
            this.Url = global::SW.Properties.Settings.Default.SW_MySoapServer_MySoapServer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event echoTestCompletedEventHandler echoTestCompleted;
        
        /// <remarks/>
        public event addSkierCompletedEventHandler addSkierCompleted;
        
        /// <remarks/>
        public event addTeamMemberCompletedEventHandler addTeamMemberCompleted;
        
        /// <remarks/>
        public event addTeamCompletedEventHandler addTeamCompleted;
        
        /// <remarks/>
        public event addFederationCompletedEventHandler addFederationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MySoapServer#echoTest", RequestNamespace="urn:MySoapServer", ResponseNamespace="urn:MySoapServer")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string echoTest(string tmp) {
            object[] results = this.Invoke("echoTest", new object[] {
                        tmp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void echoTestAsync(string tmp) {
            this.echoTestAsync(tmp, null);
        }
        
        /// <remarks/>
        public void echoTestAsync(string tmp, object userState) {
            if ((this.echoTestOperationCompleted == null)) {
                this.echoTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoTestOperationCompleted);
            }
            this.InvokeAsync("echoTest", new object[] {
                        tmp}, this.echoTestOperationCompleted, userState);
        }
        
        private void OnechoTestOperationCompleted(object arg) {
            if ((this.echoTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.echoTestCompleted(this, new echoTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MySoapServer#addFederation", RequestNamespace="urn:MySoapServer", ResponseNamespace="urn:MySoapServer")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string addSkier(string NumberId, string SkierName, string Birthdate, string FederationID) {
            object[] results = this.Invoke("addSkier", new object[] {
                        NumberId,
                        SkierName,
                        Birthdate,
                        FederationID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSkierAsync(string NumberId, string SkierName, string Birthdate, string FederationID) {
            this.addSkierAsync(NumberId, SkierName, Birthdate, FederationID, null);
        }
        
        /// <remarks/>
        public void addSkierAsync(string NumberId, string SkierName, string Birthdate, string FederationID, object userState) {
            if ((this.addSkierOperationCompleted == null)) {
                this.addSkierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSkierOperationCompleted);
            }
            this.InvokeAsync("addSkier", new object[] {
                        NumberId,
                        SkierName,
                        Birthdate,
                        FederationID}, this.addSkierOperationCompleted, userState);
        }
        
        private void OnaddSkierOperationCompleted(object arg) {
            if ((this.addSkierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSkierCompleted(this, new addSkierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MySoapServer#addFederation", RequestNamespace="urn:MySoapServer", ResponseNamespace="urn:MySoapServer")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string addTeamMember(string TeamMemberId, string TeamId, string NumberId) {
            object[] results = this.Invoke("addTeamMember", new object[] {
                        TeamMemberId,
                        TeamId,
                        NumberId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addTeamMemberAsync(string TeamMemberId, string TeamId, string NumberId) {
            this.addTeamMemberAsync(TeamMemberId, TeamId, NumberId, null);
        }
        
        /// <remarks/>
        public void addTeamMemberAsync(string TeamMemberId, string TeamId, string NumberId, object userState) {
            if ((this.addTeamMemberOperationCompleted == null)) {
                this.addTeamMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTeamMemberOperationCompleted);
            }
            this.InvokeAsync("addTeamMember", new object[] {
                        TeamMemberId,
                        TeamId,
                        NumberId}, this.addTeamMemberOperationCompleted, userState);
        }
        
        private void OnaddTeamMemberOperationCompleted(object arg) {
            if ((this.addTeamMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTeamMemberCompleted(this, new addTeamMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MySoapServer#addFederation", RequestNamespace="urn:MySoapServer", ResponseNamespace="urn:MySoapServer")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string addTeam(string TeamId, string TeamName, string CoachName, string SkiersNumber) {
            object[] results = this.Invoke("addTeam", new object[] {
                        TeamId,
                        TeamName,
                        CoachName,
                        SkiersNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addTeamAsync(string TeamId, string TeamName, string CoachName, string SkiersNumber) {
            this.addTeamAsync(TeamId, TeamName, CoachName, SkiersNumber, null);
        }
        
        /// <remarks/>
        public void addTeamAsync(string TeamId, string TeamName, string CoachName, string SkiersNumber, object userState) {
            if ((this.addTeamOperationCompleted == null)) {
                this.addTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTeamOperationCompleted);
            }
            this.InvokeAsync("addTeam", new object[] {
                        TeamId,
                        TeamName,
                        CoachName,
                        SkiersNumber}, this.addTeamOperationCompleted, userState);
        }
        
        private void OnaddTeamOperationCompleted(object arg) {
            if ((this.addTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTeamCompleted(this, new addTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MySoapServer#addFederation", RequestNamespace="urn:MySoapServer", ResponseNamespace="urn:MySoapServer")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string addFederation(string FederationID, string FederationName, string FederatedNumber) {
            object[] results = this.Invoke("addFederation", new object[] {
                        FederationID,
                        FederationName,
                        FederatedNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addFederationAsync(string FederationID, string FederationName, string FederatedNumber) {
            this.addFederationAsync(FederationID, FederationName, FederatedNumber, null);
        }
        
        /// <remarks/>
        public void addFederationAsync(string FederationID, string FederationName, string FederatedNumber, object userState) {
            if ((this.addFederationOperationCompleted == null)) {
                this.addFederationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFederationOperationCompleted);
            }
            this.InvokeAsync("addFederation", new object[] {
                        FederationID,
                        FederationName,
                        FederatedNumber}, this.addFederationOperationCompleted, userState);
        }
        
        private void OnaddFederationOperationCompleted(object arg) {
            if ((this.addFederationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFederationCompleted(this, new addFederationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void echoTestCompletedEventHandler(object sender, echoTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class echoTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal echoTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addSkierCompletedEventHandler(object sender, addSkierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSkierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSkierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addTeamMemberCompletedEventHandler(object sender, addTeamMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTeamMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTeamMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addTeamCompletedEventHandler(object sender, addTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addFederationCompletedEventHandler(object sender, addFederationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFederationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFederationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591